# -*- coding: utf-8 -*-
"""server_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jpRca101vaQtCwT6OPlI0AIDJWEQlZRo
"""
from geodist import GeoDist
import json
import pandas as pd
import numpy as np
import re
import pickle

SOURCE_FILES_PATH = "sources/"

import warnings
warnings.filterwarnings('ignore')

def dist(x):
        s = [float(s) for s in re.findall(r'-?\d+\.?\d*', x)]
        s[0], s[1] = s[1], s[0]
        s = tuple(s)
        res = float(format(GeoDist([s]).distance(37.617734, 55.751999)/1000, '.3f'))
        return res


def ml_price(MLJson):
    print(MLJson)
    try:
        MEAN_YEAR_MONOLIT = 2011
        MEAN_YEAR_PANEL = 1979
        MEAN_YEAR_BRICK = 1961
        data = pd.DataFrame([MLJson])
        # data = pd.json_normalize(MLJson, errors='ignore')
        data['location'] = [f"({data['latitude'][i]}, {data['longitude'][i]})" for i in range(len(data['latitude']))]
        # data = data.drop('id', axis=1)
        data = data.drop(['latitude', 'longitude', 'id'], axis=1)
        # print(data.info())
        data.segment.loc[data.material == 'монолит'] = MEAN_YEAR_MONOLIT
        data.segment.loc[data.material == 'панель'] = MEAN_YEAR_PANEL
        data.segment.loc[data.material == 'кирпич'] = MEAN_YEAR_BRICK

        data.material.loc[data.material == 'монолит'] = 'монолитный'
        data.material.loc[data.material == 'кирпич'] = 'кирпичный'
        data.material.loc[data.material == 'панель'] = 'панельный'

        data.rooms.loc[data.rooms == 'Студия'] = 'студия'

        data.balcony.loc[data.balcony == 'Да'] = 'балкон'
        data.balcony.loc[data.balcony == 'Нет'] = 'нет'

        for i in range(data.shape[0]):
            if type(data.metro_remoteness[i]) == int:
                if data.metro_remoteness[i] <= 5:
                    data.metro_remoteness[i] = 'до 5 мин.'
                elif 6 <= data.metro_remoteness[i] <= 10:
                    data.metro_remoteness[i] = '6–10 мин.'
                elif 11 <= data.metro_remoteness[i] <= 15:
                    data.metro_remoteness[i] = '11–15 мин.'
                elif 16 <= data.metro_remoteness[i] <= 20:
                    data.metro_remoteness[i] = '16–20 мин.'
                elif 21 <= data.metro_remoteness[i] <= 30:
                    data.metro_remoteness[i] = '21–30 мин.'
                elif data.metro_remoteness[i] >= 31:
                    data.metro_remoteness[i] = 'от 31 мин.'


        data['location'] = [dist(x) for x in data['location']]

        data['area'] = data['area'].astype(str)
        data['kitchen'] = data['kitchen'].astype(str)

        data.renovation.loc[data.renovation == 'Муниципальный ремонт'] = 'косметический'
        data.renovation.loc[data.renovation == 'Без отделки'] = 'требует ремонта'
        data.renovation.loc[data.renovation == 'Современная отделка'] = 'евро'
        
        data = data[['location', 'rooms', 'segment', 'floors', 'material', 'floor', 'area', 'kitchen',
                   'balcony', 'metro_remoteness', 'renovation']]

        data.rename(columns = {'location':'coords',
                            'rooms':'rooms_count',
                            'segment':'year',
                            'floors':'house_floors',
                            'area':'flat_area',
                            'kitchen':'kitchen_area',
                            'metro_remoteness':'metro',
                            'renovation':'condition'}, inplace = True)

        loaded_model = pickle.load(open(SOURCE_FILES_PATH+'lct_model.sav', 'rb'))
        pred = loaded_model.predict(data)
        cost = pd.Series(pred)
        cost = cost//100000 * 100000 + 90000
        cost = cost.astype(int)
        # cost = cost.to_json(force_ascii=False)
        print(cost[0])
        # json_without_slash = json.loads(cost)
        return int(cost[0])
    except:
        print("12311312")
        return 9000009
    
    